pipeline {
    agent any

  environment {
        NODEJS_HOME = tool 'nodeJs'
        PATH = "${NODEJS_HOME}/bin:${env.PATH}"
        
    }
    

      stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
    stage('preflight') {
      steps {
        echo sh(returnStdout: true, script: 'env')
        sh 'node -v'
      }
    }
    stage('build') {
      steps {
        sh 'npm --version'
        sh 'git log --reverse -1'
        sh 'npm install'
      }
    }
    stage('test') {
      steps {
        sh 'npm test'
      }
    }

     stage('Containerized Application') {
            steps {
                sh "docker build  -t mansour100/nodeapp:${env.BUILD_NUMBER} ."
                withCredentials([usernamePassword(credentialsId: '1', passwordVariable: 'password', usernameVariable: 'username')]) {
                       sh "docker login -u ${username} -p ${password}"
                       
                       sh "docker push mansour100/nodeapp:${env.BUILD_NUMBER}"

                      }
            }
        }
  

stage('deploy') {
    steps {
        withCredentials([sshUserPrivateKey(credentialsId: 'ec2', keyFileVariable: 'key', usernameVariable: 'username')]) {
            script {
                def remoteHost = 'ec2-user@18.205.55.190'
                def dockerImage = "mansour100/nodeapp:${env.BUILD_NUMBER}"

                // Pull the Docker image on the remote host
                sh "ssh -o StrictHostKeyChecking=no -i $key $remoteHost 'docker pull $dockerImage'"

                // Stop and remove the existing Docker container
                sh "ssh -o StrictHostKeyChecking=no -i $key $remoteHost 'docker stop nodeapp 2>/dev/null || true'"
                sh "ssh -o StrictHostKeyChecking=no -i $key $remoteHost 'docker rm nodeapp 2>/dev/null || true'"

                // Run the Docker container on the remote host
                withCredentials([usernamePassword(credentialsId: 'database', passwordVariable: 'passwordDb', usernameVariable: 'usernameDb')]) {
                    sh "ssh -o StrictHostKeyChecking=no -i $key $remoteHost 'docker run -d --restart always --name nodeapp -e DB_USERNAME=${usernameDb} -e DB_PASSWORD=${passwordDb} -p 3000:3000 $dockerImage'"
                }
            }
        }
    }
}

  stage('Post-Build Actions') {
            steps {
                     mail bcc: '',
                     body: "hi team this result of <b>pipeline Build URL</b>:( ${env.BUILD_URL})  <b>Git Commit</b>: ${env.GIT_COMMIT} <b>the result of build</b> :${currentBuild.result}" ,
                       cc: '', from: '', replyTo: '',
                       subject: "Jenkins Build ${env.JOB_NAME} #${env.BUILD_NUMBER}" , 
                        to: 'benahmedmansour89@gmail.com'

                        
            }
        }


    }

    post {
        always {
          
            cleanWs()
        }


}
}


